<?xml version="1.0" encoding="UTF-8"?><testrun name="moshi (1)" project="moshiI_Initial" tests="933" started="933" failures="0" errors="0" ignored="5">
  <testsuite name="com.squareup.moshi.ObjectAdapterTest" time="0.159">
    <testcase name="objectAdapterDelegatesStringNamesAndValues" classname="com.squareup.moshi.ObjectAdapterTest" time="0.07"/>
    <testcase name="objectAdapterDelegatesLists" classname="com.squareup.moshi.ObjectAdapterTest" time="0.002"/>
    <testcase name="fromJsonDoesNotFailOnNullValues" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
    <testcase name="fromJsonUsesDoublesForNumbers" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
    <testcase name="toJsonCoercesRuntimeTypeForLists" classname="com.squareup.moshi.ObjectAdapterTest" time="0.014"/>
    <testcase name="toJsonUsesTypeAdapters" classname="com.squareup.moshi.ObjectAdapterTest" time="0.02"/>
    <testcase name="objectAdapterDelegatesObjects" classname="com.squareup.moshi.ObjectAdapterTest" time="0.032"/>
    <testcase name="objectAdapterDelegatesMaps" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
    <testcase name="toJsonUsesRuntimeType" classname="com.squareup.moshi.ObjectAdapterTest" time="0.013"/>
    <testcase name="toJsonCoercesRuntimeTypeForMaps" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
    <testcase name="toJsonCoercesRuntimeTypeForSets" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
    <testcase name="toJsonJavaLangObject" classname="com.squareup.moshi.ObjectAdapterTest" time="0.0"/>
    <testcase name="toJsonCoercesRuntimeTypeForCollections" classname="com.squareup.moshi.ObjectAdapterTest" time="0.002"/>
    <testcase name="fromJsonReturnsMapsAndLists" classname="com.squareup.moshi.ObjectAdapterTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonUtf8WriterTest" time="0.076">
    <testcase name="prettyPrintObject" classname="com.squareup.moshi.JsonUtf8WriterTest" time="0.004"/>
    <testcase name="repeatedNameIgnored" classname="com.squareup.moshi.JsonUtf8WriterTest" time="0.0"/>
    <testcase name="valueFromSource" classname="com.squareup.moshi.JsonUtf8WriterTest" time="0.071"/>
    <testcase name="prettyPrintArray" classname="com.squareup.moshi.JsonUtf8WriterTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonAdapterTest" time="0.079">
    <testsuite name="[Utf8]" time="0.019">
      <testcase name="nullSafe[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="serializeNulls[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="indent[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.004"/>
      <testcase name="adaptersDelegateLeniency[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.002"/>
      <testcase name="failOnUnknown[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.002"/>
      <testcase name="stringDocumentMustBeFullyConsumed[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="adapterFromJsonStringPeeksAtEnd[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="lenient[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.004"/>
      <testcase name="nonNullDoesntDuplicate[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.002"/>
      <testcase name="indentDisallowsNull[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="lenientAdapterFromJsonStringDoesNotPeekAtEnd[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="nullSafeDoesntDuplicate[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="nonNull[Utf8]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
    </testsuite>
    <testsuite name="[Value]" time="0.054">
      <testcase name="nullSafe[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.005"/>
      <testcase name="serializeNulls[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.003"/>
      <testcase name="indent[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.042">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonAdapterTest.indent(JsonAdapterTest.java:162)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="adaptersDelegateLeniency[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="failOnUnknown[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="stringDocumentMustBeFullyConsumed[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="adapterFromJsonStringPeeksAtEnd[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="lenient[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="nonNullDoesntDuplicate[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="indentDisallowsNull[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="lenientAdapterFromJsonStringDoesNotPeekAtEnd[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="nullSafeDoesntDuplicate[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="nonNull[Value]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.006">
      <testcase name="nullSafe[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="serializeNulls[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="indent[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonAdapterTest.indent(JsonAdapterTest.java:162)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="adaptersDelegateLeniency[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="failOnUnknown[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="stringDocumentMustBeFullyConsumed[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="adapterFromJsonStringPeeksAtEnd[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="lenient[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="nonNullDoesntDuplicate[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="indentDisallowsNull[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="lenientAdapterFromJsonStringDoesNotPeekAtEnd[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.0"/>
      <testcase name="nullSafeDoesntDuplicate[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
      <testcase name="nonNull[ValuePeek]" classname="com.squareup.moshi.JsonAdapterTest" time="0.001"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonUtf8ReaderTest" time="0.087">
    <testcase name="malformedDocuments" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.005"/>
    <testcase name="veryLongUnquotedLiteral" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.007"/>
    <testcase name="peekLongMaxValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.002"/>
    <testcase name="precisionNotDiscarded" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="strictNonFiniteDoublesWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="jsonIsSingleUnquotedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictComments" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="tooDeeplyNestedObjects" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.018"/>
    <testcase name="numberWithOctalPrefix" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0" ignored="true"/>
    <testcase name="failWithPositionOverSlashSlashEndOfLineComment" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="strictUnquotedNamesWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="unescapingInvalidCharacters" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="numberToStringCoersion" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSingleQuotedStrings" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="invalidEscape" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="peekLargerThanLongMaxValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="strictMultipleTopLevelValues" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.002"/>
    <testcase name="negativeZeroIsANumber" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionOverQuotedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="stringEndingInSlash" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientNameValueSeparator" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="failureMessagePathFromSkipName" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictUnquotedStringsWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictNameValueSeparatorWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="missingValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="bomIgnoredAsFirstCharacterOfDocument" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0" ignored="true"/>
    <testcase name="strictUnquotedNames" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="bomForbiddenAsOtherCharacterInDocument" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientUnquotedStringsDelimitedByComment" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="tooDeeplyNestedArrays" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="veryLongUnterminatedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.003"/>
    <testcase name="unescapingTruncatedCharacters" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="peekingUnquotedStringsPrefixedWithIntegers" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="strictSemicolonDelimitedArray" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="prematurelyClosed" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="commentsInStringValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictUnnecessaryArraySeparatorsWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="unterminatedStringFailure" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientSemicolonDelimitedArray" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionOverUnquotedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="stringWithLeadingSlash" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictVeryLongNumber" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0" ignored="true"/>
    <testcase name="longLargerThanMaxLongThatWrapsAround" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientSingleQuotedNames" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithEscapedNewlineCharacter" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="lenientExtraCommasInMaps" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionGreaterThanBufferSize" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.002"/>
    <testcase name="peekMuchLargerThanLongMinValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPosition" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="lenientUnquotedStrings" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSingleQuotedNames" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="veryLongUnquotedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.01"/>
    <testcase name="strictExtraCommasInMaps" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionDeepPath" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSemicolonDelimitedNameValuePairWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictMultipleTopLevelValuesWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="malformedNumbers" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientSingleQuotedStrings" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="peekLongMinValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="prematureEndOfInput" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="readingDoesNotBuffer" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientUnnecessaryArraySeparators" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSingleQuotedNamesWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSemicolonDelimitedNameValuePair" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="lenientUnquotedNames" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="peekingUnquotedStringsPrefixedWithBooleans" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionIsOffsetByBom" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0" ignored="true"/>
    <testcase name="lenientInvalidEscape" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictUnquotedStrings" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="longLargerThanMinLongThatWrapsAround" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientVeryLongNumber" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0" ignored="true"/>
    <testcase name="peekLargerThanLongMinValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientSemicolonDelimitedNameValuePair" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientMultipleTopLevelValues" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictCommentsWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="mixedCaseLiterals" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="unescapingTruncatedSequence" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="readObjectBuffer" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="strictUnnecessaryArraySeparators" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSingleQuotedStringsWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="highPrecisionLong" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="quotedNumberWithEscape" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="veryLongQuotedString" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.002"/>
    <testcase name="unterminatedObject" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="strictSemicolonDelimitedArrayWithSkipValue" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="readObjectSource" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.017"/>
    <testcase name="strictNameValueSeparator" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="lenientComments" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="nullSource" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionOverCStyleComment" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.001"/>
    <testcase name="documentWithCommentEndingInSlash" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
    <testcase name="failWithPositionOverHashEndOfLineComment" classname="com.squareup.moshi.JsonUtf8ReaderTest" time="0.0"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonQualifiersTest" time="0.126">
    <testcase name="annotationWithoutJsonQualifierIsRejectedOnRegistration" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
    <testcase name="noJsonAdapterForAnnotatedType" classname="com.squareup.moshi.JsonQualifiersTest" time="0.004"/>
    <testcase name="toButNoFromJson" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
    <testcase name="builtInTypes" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
    <testcase name="builtInTypesWithMultipleAnnotations" classname="com.squareup.moshi.JsonQualifiersTest" time="0.003"/>
    <testcase name="annotationWithoutJsonQualifierIsIgnoredByAdapterMethods" classname="com.squareup.moshi.JsonQualifiersTest" time="0.1"/>
    <testcase name="readerWriterWithMultipleAnnotations" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
    <testcase name="manualJsonAdapter" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
    <testcase name="readerWriterAnnotationDelegating" classname="com.squareup.moshi.JsonQualifiersTest" time="0.003"/>
    <testcase name="basicTypesAnnotationDelegating" classname="com.squareup.moshi.JsonQualifiersTest" time="0.002"/>
    <testcase name="annotationsConflict" classname="com.squareup.moshi.JsonQualifiersTest" time="0.003"/>
    <testcase name="readerWriterJsonAdapter" classname="com.squareup.moshi.JsonQualifiersTest" time="0.005"/>
    <testcase name="fromButNoToJson" classname="com.squareup.moshi.JsonQualifiersTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonReaderPathTest" time="0.022">
    <testsuite name="[Utf8]" time="0.009">
      <testcase name="multipleTopLevelValuesInOneDocument[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="skipObjectValues[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="arrayPath[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="path[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.003"/>
      <testcase name="skipObjectNames[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="skipArrayElements[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="arrayOfObjects[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="objectPath[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="skipNestedStructures[Utf8]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
    </testsuite>
    <testsuite name="[Value]" time="0.009">
      <testcase name="multipleTopLevelValuesInOneDocument[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.002">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderPathTest.multipleTopLevelValuesInOneDocument(JsonReaderPathTest.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="skipObjectValues[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="arrayPath[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="path[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="skipObjectNames[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.002"/>
      <testcase name="skipArrayElements[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="arrayOfObjects[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="objectPath[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="skipNestedStructures[Value]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.004">
      <testcase name="multipleTopLevelValuesInOneDocument[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderPathTest.multipleTopLevelValuesInOneDocument(JsonReaderPathTest.java:191)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="skipObjectValues[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="arrayPath[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="path[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="skipObjectNames[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="skipArrayElements[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
      <testcase name="arrayOfObjects[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="objectPath[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.0"/>
      <testcase name="skipNestedStructures[ValuePeek]" classname="com.squareup.moshi.JsonReaderPathTest" time="0.001"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.CircularAdaptersTest" time="0.016">
    <testcase name="circularAdapters" classname="com.squareup.moshi.CircularAdaptersTest" time="0.01"/>
    <testcase name="circularAdaptersAndAnnotations" classname="com.squareup.moshi.CircularAdaptersTest" time="0.006"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.MoshiTest" time="0.469">
    <testcase name="customJsonAdapterToObjectAndFromObject" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="customJsonAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="failOnUnknownThrowsOnUnknownFields" classname="com.squareup.moshi.MoshiTest" time="0.003"/>
    <testcase name="adapterLookupDisallowsNullAnnotations" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="nullEnum" classname="com.squareup.moshi.MoshiTest" time="0.004"/>
    <testcase name="duplicateKeysAllowedInCustomType" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="platformTypeThrows" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="adapterLookupDisallowsNullType" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="referenceCyclesOnObjects" classname="com.squareup.moshi.MoshiTest" time="0.003"/>
    <testcase name="primitiveArray" classname="com.squareup.moshi.MoshiTest" time="0.006"/>
    <testcase name="reentrantFieldErrorMessagesListWrapper" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="objectArray" classname="com.squareup.moshi.MoshiTest" time="0.006"/>
    <testcase name="doubleAdapter" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="indent" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="LongAdapter" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="byteAdapter" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="stringAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="invalidEnumHasCorrectPathInExceptionMessage" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="invalidEnum" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="annotatedEnum" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="reentrantFieldErrorMessagesWrapper" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="duplicateKeyDisallowedInObjectType" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="enumAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="nextJsonAdapterDisallowsNullAnnotations" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="referenceCyclesOnArrays" classname="com.squareup.moshi.MoshiTest" time="0.004"/>
    <testcase name="setJsonAdapter" classname="com.squareup.moshi.MoshiTest" time="0.004"/>
    <testcase name="DoubleAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="lowerBoundedWildcardsAreNotHandled" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="unindent" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="collectionJsonAdapter" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="reentrantFieldErrorMessagesTopLevelMap" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="upperBoundedWildcardsAreHandled" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="registerJsonAdapterForAnnotatedType" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="listJsonAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="qualifierWithElements" classname="com.squareup.moshi.MoshiTest" time="0.003"/>
    <testcase name="classAdapterToObjectAndFromObject" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="shortAdapter" classname="com.squareup.moshi.MoshiTest" time="0.004"/>
    <testcase name="intAdapter" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="BooleanAdapter" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="ShortAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="ByteAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="delegatingJsonAdapterFactory" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="cachingJsonAdapters" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="floatAdapter" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="composingJsonAdapterFactory" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="qualifierWithElementsMayNotBeDirectlyRegistered" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="newBuilder" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="addNullFails" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="FloatAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="adaptersRegisteredInOrderOfPrecedence" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="noTypeAdapterForQualifiedPlatformType" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="IntegerAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="booleanAdapter" classname="com.squareup.moshi.MoshiTest" time="0.0"/>
    <testcase name="longAdapter" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="charAdapter" classname="com.squareup.moshi.MoshiTest" time="0.398"/>
    <testcase name="CharacterAdapter" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="byDefaultUnknownFieldsAreIgnored" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
    <testcase name="referenceCyclesOnMixedTypes" classname="com.squareup.moshi.MoshiTest" time="0.002"/>
    <testcase name="collectionsDoNotKeepAnnotations" classname="com.squareup.moshi.MoshiTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.FlattenTest" time="0.008">
    <testsuite name="[Utf8]" time="0.002">
      <testcase name="multipleCallsToFlattenSameNesting[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenDoesNotImpactOtherTypesInArrays[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenOnlySomeChildren[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="deepFlatten[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenObject[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenMultipleNested[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenIsOnlyOneLevelDeep[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenExample[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenTopLevel[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="recursiveFlatten[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenArray[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenDoesNotImpactOtherTypesInObjects[Utf8]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
    </testsuite>
    <testsuite name="[Value]" time="0.003">
      <testcase name="multipleCallsToFlattenSameNesting[Value]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenDoesNotImpactOtherTypesInArrays[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenOnlySomeChildren[Value]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="deepFlatten[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenObject[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenMultipleNested[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenIsOnlyOneLevelDeep[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenExample[Value]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenTopLevel[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="recursiveFlatten[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenArray[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenDoesNotImpactOtherTypesInObjects[Value]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.003">
      <testcase name="multipleCallsToFlattenSameNesting[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenDoesNotImpactOtherTypesInArrays[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenOnlySomeChildren[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="deepFlatten[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenObject[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenMultipleNested[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenIsOnlyOneLevelDeep[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenExample[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
      <testcase name="flattenTopLevel[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="recursiveFlatten[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenArray[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.0"/>
      <testcase name="flattenDoesNotImpactOtherTypesInObjects[ValuePeek]" classname="com.squareup.moshi.FlattenTest" time="0.001"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.TypesTest" time="0.028">
    <testcase name="parameterizedTypeWithIncorrectOwnerProvided" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="generatedJsonAdapterName_strings" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="mapKeyAndValueTypes" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="getFieldJsonQualifierAnnotations_privateFieldTest" classname="com.squareup.moshi.TypesTest" time="0.005"/>
    <testcase name="nextAnnotationsRequiresJsonAnnotation" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="propertiesTypes" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="collectionElementType" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="nextAnnotationsReturnsDelegateAnnotations" classname="com.squareup.moshi.TypesTest" time="0.004"/>
    <testcase name="supertypeOf" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="getFieldJsonQualifierAnnotations_unannotatedTest" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="arrayOf" classname="com.squareup.moshi.TypesTest" time="0.003"/>
    <testcase name="createJsonQualifierImplementation" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="nextAnnotationsDoesNotContainReturnsNull" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="recursiveTypeVariablesResolve" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="fixedVariablesTypes" classname="com.squareup.moshi.TypesTest" time="0.002"/>
    <testcase name="parameterizedTypeWithUnnecessaryOwnerProvided" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="parameterizedTypeWithRequiredOwnerMissing" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="newParameterizedType_missingTypeVars" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="subtypeOf" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="generatedJsonAdapterName_class" classname="com.squareup.moshi.TypesTest" time="0.002"/>
    <testcase name="recursiveTypeVariablesResolve1" classname="com.squareup.moshi.TypesTest" time="0.002"/>
    <testcase name="recursiveTypeVariablesResolve2" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="getFieldJsonQualifierAnnotations_publicFieldTest" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="newParameterizedTypeObjectMethods" classname="com.squareup.moshi.TypesTest" time="0.001"/>
    <testcase name="arrayComponentType" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="newParameterizedType" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="parameterizedAndWildcardTypesCannotHavePrimitiveArguments" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="generatedJsonAdapterName_class_missingJsonClass" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="arrayEqualsGenericTypeArray" classname="com.squareup.moshi.TypesTest" time="0.0"/>
    <testcase name="getFirstTypeArgument" classname="com.squareup.moshi.TypesTest" time="0.0"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.PromoteNameToValueTest" time="0.018">
    <testsuite name="[Utf8]" time="0.006">
      <testcase name="writerValueSinkFails[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerLongValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerBooleanValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedIntegerValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerIntegerValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerUnusedPromotionDoesntPersist[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerDoubleValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerLongValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerStringValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerDoubleValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerNullValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerStringValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerUnusedPromotionDoesntPersist[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerNullValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedDoubleValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerSourceValueFails[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerBooleanValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerIntegerValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerEmptyValueObject[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedLongValue[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerMultipleValueObject[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerEmptyValueObject[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerMultipleValueObject[Utf8]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
    </testsuite>
    <testsuite name="[Value]" time="0.006">
      <testcase name="writerValueSinkFails[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerLongValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerBooleanValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedIntegerValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerIntegerValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnusedPromotionDoesntPersist[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerDoubleValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerLongValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerStringValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerDoubleValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerNullValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerStringValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerUnusedPromotionDoesntPersist[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerNullValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedDoubleValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerSourceValueFails[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerBooleanValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerIntegerValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerEmptyValueObject[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedLongValue[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerMultipleValueObject[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerEmptyValueObject[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerMultipleValueObject[Value]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.006">
      <testcase name="writerValueSinkFails[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerLongValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerBooleanValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedIntegerValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerIntegerValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerUnusedPromotionDoesntPersist[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerDoubleValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerLongValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerStringValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerDoubleValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerNullValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerStringValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerUnusedPromotionDoesntPersist[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerNullValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedDoubleValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerSourceValueFails[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerBooleanValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="readerIntegerValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerEmptyValueObject[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerUnquotedLongValue[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="readerMultipleValueObject[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.001"/>
      <testcase name="writerEmptyValueObject[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
      <testcase name="writerMultipleValueObject[ValuePeek]" classname="com.squareup.moshi.PromoteNameToValueTest" time="0.0"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonWriterTest" time="0.047">
    <testsuite name="[Utf8]" time="0.02">
      <testcase name="closedWriterThrowsOnFlush[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="closedWriterThrowsOnValue[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="unicodeLineBreaksEscaped[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceBeforeCloseFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="numbers[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nullName[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="strings[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="closedWriterThrowsOnStructure[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="streamingValueAndScalarValueFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameInArrayIsANestingProblem[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceAfterCloseFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="strictWriterDoesNotPermitMultipleTopLevelValues[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingArrays[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nullsValuesNotSerializedByDefault[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullStringValue[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyArray[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="topLevelInt[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="arraysInObjects[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelDouble[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameWithoutValue[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInArray[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="objectsInArrays[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nullsValuesSerializedWhenConfigured[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullNumbers[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="writerCloseIsIdempotent[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueCloseIsIdempotent[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueAndNameFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelString[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelNull[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="longs[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nulls[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="invalidTopLevelTypes[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTopLevel[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingObjects[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInObject[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="multipleTopLevelValues[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.002"/>
      <testcase name="badNestingObject[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="badNestingArray[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="boxedBooleans[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.006"/>
      <testcase name="nonFiniteBoxedDoubles[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="missingValueInObjectIsANestingProblem[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyObject[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="deepNestingArrays[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="danglingNameFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="valueWithoutName[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelBoolean[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="lenientWriterPermitsMultipleTopLevelValues[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameNotInObjectFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="twoNames[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInteractionAfterCloseFails[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="doubles[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="closedWriterThrowsOnName[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="deepNestingObjects[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="booleans[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nonFiniteDoubles[Utf8]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
    </testsuite>
    <testsuite name="[Value]" time="0.015">
      <testcase name="closedWriterThrowsOnFlush[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="closedWriterThrowsOnValue[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="unicodeLineBreaksEscaped[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceBeforeCloseFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="numbers[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterTest.numbers(JsonWriterTest.java:276)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="nullName[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="strings[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="closedWriterThrowsOnStructure[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueAndScalarValueFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameInArrayIsANestingProblem[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceAfterCloseFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="strictWriterDoesNotPermitMultipleTopLevelValues[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingArrays[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullsValuesNotSerializedByDefault[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullStringValue[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyArray[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="topLevelInt[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="arraysInObjects[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelDouble[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameWithoutValue[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInArray[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="objectsInArrays[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nullsValuesSerializedWhenConfigured[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullNumbers[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="writerCloseIsIdempotent[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueCloseIsIdempotent[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueAndNameFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelString[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="topLevelNull[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="longs[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nulls[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="invalidTopLevelTypes[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTopLevel[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingObjects[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="streamingValueInObject[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="multipleTopLevelValues[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="badNestingObject[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="badNestingArray[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="boxedBooleans[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nonFiniteBoxedDoubles[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="missingValueInObjectIsANestingProblem[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyObject[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="deepNestingArrays[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="danglingNameFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="valueWithoutName[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelBoolean[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="lenientWriterPermitsMultipleTopLevelValues[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterTest.lenientWriterPermitsMultipleTopLevelValues(JsonWriterTest.java:482)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="nameNotInObjectFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="twoNames[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInteractionAfterCloseFails[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="doubles[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="closedWriterThrowsOnName[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="deepNestingObjects[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.002"/>
      <testcase name="booleans[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nonFiniteDoubles[Value]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.012">
      <testcase name="closedWriterThrowsOnFlush[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="closedWriterThrowsOnValue[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="unicodeLineBreaksEscaped[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceBeforeCloseFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="numbers[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterTest.numbers(JsonWriterTest.java:276)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="nullName[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="strings[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="closedWriterThrowsOnStructure[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueAndScalarValueFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameInArrayIsANestingProblem[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTwiceAfterCloseFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="strictWriterDoesNotPermitMultipleTopLevelValues[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingArrays[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullsValuesNotSerializedByDefault[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="nullStringValue[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyArray[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelInt[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="arraysInObjects[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelDouble[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nameWithoutValue[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInArray[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="objectsInArrays[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullsValuesSerializedWhenConfigured[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nullNumbers[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="writerCloseIsIdempotent[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueCloseIsIdempotent[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueAndNameFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelString[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelNull[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="longs[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nulls[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="invalidTopLevelTypes[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueTopLevel[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="tooDeeplyNestingObjects[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="streamingValueInObject[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="multipleTopLevelValues[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="badNestingObject[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="badNestingArray[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="boxedBooleans[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nonFiniteBoxedDoubles[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="missingValueInObjectIsANestingProblem[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="emptyObject[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="deepNestingArrays[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="danglingNameFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="valueWithoutName[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="topLevelBoolean[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="lenientWriterPermitsMultipleTopLevelValues[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterTest.lenientWriterPermitsMultipleTopLevelValues(JsonWriterTest.java:482)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="nameNotInObjectFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="twoNames[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="streamingValueInteractionAfterCloseFails[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="doubles[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="closedWriterThrowsOnName[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="deepNestingObjects[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
      <testcase name="booleans[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.0"/>
      <testcase name="nonFiniteDoubles[ValuePeek]" classname="com.squareup.moshi.JsonWriterTest" time="0.001"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.RecursiveTypesResolveTest" time="0.002">
    <testcase name="doubleSubtype" classname="com.squareup.moshi.RecursiveTypesResolveTest" time="0.0"/>
    <testcase name="doubleSupertype" classname="com.squareup.moshi.RecursiveTypesResolveTest" time="0.0"/>
    <testcase name="superSubtype" classname="com.squareup.moshi.RecursiveTypesResolveTest" time="0.0"/>
    <testcase name="recursiveResolveSimple" classname="com.squareup.moshi.RecursiveTypesResolveTest" time="0.002"/>
    <testcase name="subSupertype" classname="com.squareup.moshi.RecursiveTypesResolveTest" time="0.0"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.ClassJsonAdapterTest" time="0.081">
    <testcase name="noArgConstructor" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.004"/>
    <testcase name="fieldNameCollisionWithTransientFieldIsOkay" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="localClassNotSupported" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.05"/>
    <testcase name="jsonAnnotationNameCollision" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="magicConstructorFieldDefaultsNotHonored" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="noArgConstructorFieldDefaultsHonored" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="magicConstructor" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="interfaceNotSupported" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="fieldNameCollision" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="abstractClassNotSupported" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="nonStaticNestedClassNotSupported" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="noArgConstructorThrowsCheckedException" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="transientFieldsOmitted" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.002"/>
    <testcase name="privateFields" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="jsonAnnotationHonored" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.002"/>
    <testcase name="typeHierarchy" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="nullFieldValues" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="nullRootObject" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="platformSuperclassProtectedFieldIsIncluded" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.005"/>
    <testcase name="staticFieldsOmitted" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="anonymousClassNotSupported" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.007"/>
    <testcase name="parameterizedType" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="basicClassAdapter" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="noArgConstructorThrowsUncheckedException" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.0"/>
    <testcase name="fieldsAreAlphabeticalAcrossFlattenedHierarchy" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.001"/>
    <testcase name="platformSuperclassPrivateFieldIsExcluded" classname="com.squareup.moshi.ClassJsonAdapterTest" time="0.002"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonWriterPathTest" time="0.001">
    <testsuite name="[Utf8]" time="0.0">
      <testcase name="multipleTopLevelValuesInOneDocument[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayPath[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="path[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedArrays[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedObjects[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfObjects[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="objectPath[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="skipNulls[Utf8]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
    </testsuite>
    <testsuite name="[Value]" time="0.001">
      <testcase name="multipleTopLevelValuesInOneDocument[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterPathTest.multipleTopLevelValuesInOneDocument(JsonWriterPathTest.java:205)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="arrayPath[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="path[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedArrays[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedObjects[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfObjects[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="objectPath[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="skipNulls[Value]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.0">
      <testcase name="multipleTopLevelValuesInOneDocument[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonWriterPathTest.multipleTopLevelValuesInOneDocument(JsonWriterPathTest.java:205)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="arrayPath[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="path[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedArrays[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="nestedObjects[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfObjects[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="objectPath[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="arrayOfArrays[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
      <testcase name="skipNulls[ValuePeek]" classname="com.squareup.moshi.JsonWriterPathTest" time="0.0"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonReaderTest" time="0.062">
    <testsuite name="[Utf8]" time="0.001">
      <testcase name="skipTopLevelObject[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictQuotedNonFiniteDoubles[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringUnnecessaryEscaping[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypeWithSkipValue[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectName[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringNecessaryEscaping[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="helloWorld[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownObjectValue[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="basicPeekJson[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameUnnecessaryEscaping[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nullLiteralIsNotAString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readArray[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueListMultipleTypes[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekJsonReader[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelUnquotedString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameNecessaryEscaping[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithTruncatedExponent[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readObject[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringToNumberCoersion[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithNonDigitExponent[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="intMismatchWithStringDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringWithoutString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="doubleMismatchWithStringDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyStringName[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekAfterPeek[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipDouble[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyDocumentHasNextReturnsFalse[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readEmptyArray[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="longMismatchWithStringDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelQuotedString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipObject[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringSingleQuoted[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekAfterPromoteNameToValue[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="longs[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="longMismatchWithDoubleDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="deeplyNestedArrays[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfObjectFails[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integerMismatchWithDoubleDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="unnecessaryPrecisionNumberCoersion[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueInt[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="readJsonValueMap[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integersWithFractionalPartSpecified[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongUnquotedString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipInteger[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueNestedListInMap[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipNameFailUnknown[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nextFailuresDoNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nanInfinityDoubleCoersion[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownArrayElement[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readEmptyObject[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfArrayFails[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="lenientQuotedNonFiniteDoubles[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfDocumentFails[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="lenientNonFiniteDoubles[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypes[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipNameOnValueFails[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringNullIsNotNull[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongQuotedString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipObjectAfterPeek[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringUnquoted[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithDigitAndNonDigitExponent[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameSingleQuoted[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringMaintainsReaderState[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integerMismatchWithLongDoesNotAdvance[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueList[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArrayAfterPeek[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="deeplyNestedObjects[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="doubles[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameUnquoted[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="validEscapes[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="characterUnescaping[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="booleans[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectString[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArray[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictNonFiniteDoubles[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipName[Utf8]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
    </testsuite>
    <testsuite name="[Value]" time="0.002">
      <testcase name="skipTopLevelObject[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictQuotedNonFiniteDoubles[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringUnnecessaryEscaping[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypeWithSkipValue[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectName[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringNecessaryEscaping[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="helloWorld[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownObjectValue[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="basicPeekJson[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameUnnecessaryEscaping[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nullLiteralIsNotAString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readArray[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueListMultipleTypes[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekJsonReader[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelUnquotedString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameNecessaryEscaping[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithTruncatedExponent[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readObject[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringToNumberCoersion[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithNonDigitExponent[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="intMismatchWithStringDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringWithoutString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="doubleMismatchWithStringDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyStringName[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekAfterPeek[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipDouble[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyDocumentHasNextReturnsFalse[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readEmptyArray[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="longMismatchWithStringDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelQuotedString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipObject[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringSingleQuoted[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekAfterPromoteNameToValue[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="longs[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.longs(JsonReaderTest.java:361)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="longMismatchWithDoubleDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.longMismatchWithDoubleDoesNotAdvance(JsonReaderTest.java:493)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="deeplyNestedArrays[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfObjectFails[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integerMismatchWithDoubleDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.integerMismatchWithDoubleDoesNotAdvance(JsonReaderTest.java:465)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="unnecessaryPrecisionNumberCoersion[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueInt[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueMap[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integersWithFractionalPartSpecified[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongUnquotedString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipInteger[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueNestedListInMap[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipNameFailUnknown[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nextFailuresDoNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nanInfinityDoubleCoersion[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownArrayElement[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readEmptyObject[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfArrayFails[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="lenientQuotedNonFiniteDoubles[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfDocumentFails[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="lenientNonFiniteDoubles[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypes[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipNameOnValueFails[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringNullIsNotNull[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongQuotedString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipObjectAfterPeek[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringUnquoted[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithDigitAndNonDigitExponent[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameSingleQuoted[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringMaintainsReaderState[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integerMismatchWithLongDoesNotAdvance[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.integerMismatchWithLongDoesNotAdvance(JsonReaderTest.java:479)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="readJsonValueList[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArrayAfterPeek[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="deeplyNestedObjects[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="doubles[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameUnquoted[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="validEscapes[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="characterUnescaping[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="booleans[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectString[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArray[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictNonFiniteDoubles[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipName[Value]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
    </testsuite>
    <testsuite name="[ValuePeek]" time="0.059">
      <testcase name="skipTopLevelObject[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictQuotedNonFiniteDoubles[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringUnnecessaryEscaping[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypeWithSkipValue[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectName[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringNecessaryEscaping[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="helloWorld[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownObjectValue[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="basicPeekJson[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameUnnecessaryEscaping[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nullLiteralIsNotAString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readArray[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueListMultipleTypes[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekJsonReader[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelUnquotedString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameNecessaryEscaping[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithTruncatedExponent[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readObject[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringToNumberCoersion[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="stringAsNumberWithNonDigitExponent[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="intMismatchWithStringDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.005"/>
      <testcase name="selectStringWithoutString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="doubleMismatchWithStringDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="emptyStringName[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="peekAfterPeek[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.004"/>
      <testcase name="skipDouble[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.009"/>
      <testcase name="emptyDocumentHasNextReturnsFalse[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.005"/>
      <testcase name="readEmptyArray[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="longMismatchWithStringDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipTopLevelQuotedString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.004"/>
      <testcase name="skipObject[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="selectStringSingleQuoted[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="peekAfterPromoteNameToValue[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="longs[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.longs(JsonReaderTest.java:361)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="longMismatchWithDoubleDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.longMismatchWithDoubleDoesNotAdvance(JsonReaderTest.java:493)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="deeplyNestedArrays[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfObjectFails[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.002"/>
      <testcase name="integerMismatchWithDoubleDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.002">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.integerMismatchWithDoubleDoesNotAdvance(JsonReaderTest.java:465)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="unnecessaryPrecisionNumberCoersion[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="readJsonValueInt[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="readJsonValueMap[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="integersWithFractionalPartSpecified[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongUnquotedString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="skipInteger[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readJsonValueNestedListInMap[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipNameFailUnknown[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="nextFailuresDoNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="nanInfinityDoubleCoersion[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="failOnUnknownFailsOnUnknownArrayElement[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="readEmptyObject[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="skipValueAtEndOfArrayFails[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="lenientQuotedNonFiniteDoubles[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipValueAtEndOfDocumentFails[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.002"/>
      <testcase name="lenientNonFiniteDoubles[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="topLevelValueTypes[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="skipNameOnValueFails[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="stringNullIsNotNull[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="emptyString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipVeryLongQuotedString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="skipObjectAfterPeek[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.003"/>
      <testcase name="selectStringUnquoted[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="stringAsNumberWithDigitAndNonDigitExponent[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectNameSingleQuoted[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="selectStringMaintainsReaderState[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="integerMismatchWithLongDoesNotAdvance[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001">
        <skipped>org.junit.AssumptionViolatedException: got: &lt;false&gt;, expected: is &lt;true&gt;
	at org.junit.Assume.assumeThat(Assume.java:95)
	at org.junit.Assume.assumeTrue(Assume.java:41)
	at com.squareup.moshi.JsonReaderTest.integerMismatchWithLongDoesNotAdvance(JsonReaderTest.java:479)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)

</skipped>
      </testcase>
      <testcase name="readJsonValueList[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArrayAfterPeek[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="deeplyNestedObjects[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="doubles[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="selectNameUnquoted[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="validEscapes[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="characterUnescaping[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="booleans[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
      <testcase name="selectString[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipArray[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="strictNonFiniteDoubles[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.0"/>
      <testcase name="skipName[ValuePeek]" classname="com.squareup.moshi.JsonReaderTest" time="0.001"/>
    </testsuite>
  </testsuite>
  <testsuite name="com.squareup.moshi.AdapterMethodsTest" time="0.055">
    <testcase name="toJsonOnly" classname="com.squareup.moshi.AdapterMethodsTest" time="0.01"/>
    <testcase name="noToJsonAdapterTakingJsonAdapterParameter" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="parameterizedTypeCacheKey" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="conflictingFromAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.002"/>
    <testcase name="adapterDoesFromJsonOnly" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="writerAndReaderTakingAnnotatedJsonAdapterParameter" classname="com.squareup.moshi.AdapterMethodsTest" time="0.013"/>
    <testcase name="parameterizedTypeEqualsNotUsed" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="unexpectedSignatureToAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="adaptedTypeIsEnclosedParameterizedType" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="toAndFromWithDelegateWithQualifier" classname="com.squareup.moshi.AdapterMethodsTest" time="0.002"/>
    <testcase name="toAndFromNullNotNullable" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="noFromJsonAdapterTakingJsonAdapterParameter" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="multipleLayersOfAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="toAndFromWithIntermediate" classname="com.squareup.moshi.AdapterMethodsTest" time="0.0"/>
    <testcase name="conflictingToAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="writerAndReaderTakingMultipleJsonAdapterParameters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.003"/>
    <testcase name="toAndFromJsonWithWriterAndReader" classname="com.squareup.moshi.AdapterMethodsTest" time="0.0"/>
    <testcase name="toAndFromJsonViaListOfIntegers" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="unexpectedSignatureFromAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.0"/>
    <testcase name="toAndFromNullJsonWithWriterAndReader" classname="com.squareup.moshi.AdapterMethodsTest" time="0.002"/>
    <testcase name="fromJsonOnly" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="adapterThrows" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="emptyAdapters" classname="com.squareup.moshi.AdapterMethodsTest" time="0.0"/>
    <testcase name="adapterDoesToJsonOnly" classname="com.squareup.moshi.AdapterMethodsTest" time="0.0"/>
    <testcase name="toAndFromNullNullable" classname="com.squareup.moshi.AdapterMethodsTest" time="0.005"/>
    <testcase name="genericArrayTypes" classname="com.squareup.moshi.AdapterMethodsTest" time="0.002"/>
    <testcase name="toAndFromWithDelegate" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="writerAndReaderTakingJsonAdapterParameter" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
    <testcase name="toAndFromWithIntermediateWithQualifier" classname="com.squareup.moshi.AdapterMethodsTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.LinkedHashTreeMapTest" time="0.035">
    <testcase name="forceDoublingAndRehash" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.027"/>
    <testcase name="doubleCapacityAllNodesOnLeft" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.001"/>
    <testcase name="doubleCapacity" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="putNullKeyFails" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="equalsAndHashCode" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.001"/>
    <testcase name="putNonComparableKeyFails" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="avlWalker" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="clear" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.001"/>
    <testcase name="iterationOrder" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.001"/>
    <testcase name="avlBuilder" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.003"/>
    <testcase name="removeRootDoesNotDoubleUnlink" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="containsNullKeyIsAlwaysFalse" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="emptyStringValues" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="ContainsNonComparableKeyReturnsFalse" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.0"/>
    <testcase name="putOverrides" classname="com.squareup.moshi.LinkedHashTreeMapTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.DeferredAdapterTest" time="0.015">
    <testcase name="concurrentSafe" classname="com.squareup.moshi.DeferredAdapterTest" time="0.015"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonValueReaderTest" time="0.008">
    <testcase name="nullKey" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="endArrayTooEarly" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="tooDeeplyNestedObjects" classname="com.squareup.moshi.JsonValueReaderTest" time="0.002"/>
    <testcase name="numberToStringCoersion" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unsupportedKeyType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unexpectedIntType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="object" classname="com.squareup.moshi.JsonValueReaderTest" time="0.001"/>
    <testcase name="failOnUnknown" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="tooDeeplyNestedArrays" classname="com.squareup.moshi.JsonValueReaderTest" time="0.002"/>
    <testcase name="unexpectedLongType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unexpectedNullType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unexpectedDoubleType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unsupportedType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.001"/>
    <testcase name="unexpectedBooleanType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="array" classname="com.squareup.moshi.JsonValueReaderTest" time="0.001"/>
    <testcase name="close" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="skipObjectValue" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="skipObjectName" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="promoteNameToValue" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="endObjectTooEarly" classname="com.squareup.moshi.JsonValueReaderTest" time="0.001"/>
    <testcase name="nesting" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="unexpectedStringType" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="skipListValue" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
    <testcase name="skipRoot" classname="com.squareup.moshi.JsonValueReaderTest" time="0.0"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.JsonValueWriterTest" time="0.005">
    <testcase name="valueLongEmitsLong" classname="com.squareup.moshi.JsonValueWriterTest" time="0.0"/>
    <testcase name="repeatedNameThrows" classname="com.squareup.moshi.JsonValueWriterTest" time="0.001"/>
    <testcase name="valueDoubleEmitsDouble" classname="com.squareup.moshi.JsonValueWriterTest" time="0.0"/>
    <testcase name="object" classname="com.squareup.moshi.JsonValueWriterTest" time="0.001"/>
    <testcase name="primitiveIntegerTypesEmitLong" classname="com.squareup.moshi.JsonValueWriterTest" time="0.001"/>
    <testcase name="valueFromSource" classname="com.squareup.moshi.JsonValueWriterTest" time="0.0"/>
    <testcase name="valueCustomNumberTypeEmitsLongOrBigDecimal" classname="com.squareup.moshi.JsonValueWriterTest" time="0.0"/>
    <testcase name="array" classname="com.squareup.moshi.JsonValueWriterTest" time="0.001"/>
    <testcase name="primitiveFloatingPointTypesEmitDouble" classname="com.squareup.moshi.JsonValueWriterTest" time="0.0"/>
    <testcase name="otherNumberTypesEmitBigDecimal" classname="com.squareup.moshi.JsonValueWriterTest" time="0.001"/>
  </testsuite>
  <testsuite name="com.squareup.moshi.MapJsonAdapterTest" time="0.006">
    <testcase name="nullMap" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="mapWithNullKeyFailsToEmit" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
    <testcase name="mapWithNonStringKeysToJsonObject" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="map" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="mapWithNonStringKeys" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
    <testcase name="duplicatesAreForbidden" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
    <testcase name="booleanKeyTypeHasCoherentErrorMessage" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="covariantValue" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
    <testcase name="orderIsRetained" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="emptyMap" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.0"/>
    <testcase name="arrayKeyTypeHasCoherentErrorMessage" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
    <testcase name="objectKeyTypeHasCoherentErrorMessage" classname="com.squareup.moshi.MapJsonAdapterTest" time="0.001"/>
  </testsuite>
</testrun>
